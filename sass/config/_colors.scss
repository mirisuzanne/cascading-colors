@use 'sass:map';
@use 'sass:meta';

// Hues
// ----
/// The colors to generate, and optional default hues for each color.
/// To set both color-names and hues, provide an explicit map.
/// - If you provide a single hue value,
///   we'll assign it to the required `prime` key.
/// - If you provide a list of color names, we
///   we'll assign them all default `null` hue values.
///
/// Two color names are given special treatment:
/// - `prime` is required, a defaults to `330` if undefined
/// - `neutral` colors (including `neutral` anywhere in a color-name)
///   will use the `$neutral-saturation` or most-desaturated value
/// @type map | list | string | number | null
/// @group config
$hues: (
  'prime',
  'accent',
  'neutral',
) !default;

// Convert $hues to a map, or error on invalid hues
@if (meta.type-of($hues) != 'map') {
  @if (meta.type-of($hues) == 'list') or (meta.type-of($hues) == 'string') {
    $hues-list: $hues;
    $hues: ();

    @each $color in $hues-list {
      $hues: map.merge($hues, ($color: null));
    }
  } @else if (meta.type-of($hues) == 'number') or (not $hues) {
    $hues: ('prime': $hues);
  }
}

// Require a prime hue
@if not (map.has-key($hues, 'prime')) {
  @error 'Please provide a `prime` hue';
}

// Lightness
// ---------
/// The global default lightness percentage for core colors.
/// Tints and shades will be generated in even increments
/// lighter and darker than this starting value.
///
/// - Sass: `$lightness: 50%;`
/// - CSS: `--ccs-lightness--config: 50%;`
///
/// @type percentage | null
/// @group config
$lightness: null !default;

// Saturation
// ----------
/// The global default saturation percentage for core colors.
/// Tints and shades will be generated in even increments
/// less saturated than this starting value.
///
/// - Sass: `$saturation: 50%;`
/// - CSS: `--ccs-saturation--config: 50%;`
///
/// @type percentage | null
/// @group config
$saturation: null !default;

// Contrast
// --------
/// The global default contrast range for color palettes.
/// Tints and shades will be generated in even increments
/// up to the total range of contrast.
///
/// - Sass: `$contrast: 45%;`
/// - CSS: `--ccs-contrast--config: 45%;`
///
/// @type percentage | null
/// @group config
$contrast: null !default;

// Fade Background
// ---------------
/// It can be useful to desaturate background colors
/// more quickly than their foreground counterparts.
/// Optionally set an additinal saturation-offset
/// for background tints/shades
/// in relation to the foreground.
///
/// - Sass: `$fade-background: 0%;`
/// - CSS: `--ccs-fade-background--config: 0%;`
///
/// @type percentage | null
/// @group config
$fade-background: null !default;

// Neutral Saturation
// ------------------
/// By default, neutral saturation is set to
/// the full-contrast background saturation.
/// At low-contrast that can still be quite saturated,
/// so we provide an override when needed.
///
/// - Sass: `$neutral-saturation: 15%;`
/// - CSS: `--ccs-s-neutral--config: 15%;`
///
/// @type percentage | null
/// @group config
$neutral-saturation: null !default;

// Fallback Dark
// -------------
/// A dark fallback color
/// for browsers that don't support
/// CSS custom properties.
/// The default value is based on
/// `map.get($hues, 'prime')`, `$saturation`, `$lightness`,
/// and maximum `$contrast`.
///
/// @type color
/// @group config
$fallback-dark: hsl(
  map.get($hues, 'prime') or 330,
  ($saturation or 50%) - ($contrast or 45%),
  ($lightness or 50%) - ($contrast or 45%)
) !default;

// Fallback Light
// --------------
/// A light fallback color
/// for browsers that don't support
/// CSS custom properties.
/// The default value is based on
/// `map.get($hues, 'prime')`, `$saturation`, `$lightness`,
/// and maximum `$contrast`.
///
/// @type color
/// @group config
$fallback-light: hsl(
  map.get($hues, 'prime') or 330,
  ($saturation or 50%) - ($contrast or 45%),
  ($lightness or 50%) + ($contrast or 45%)
) !default;
