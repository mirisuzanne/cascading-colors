@use '../config';
@use 'sass:list';
@use 'sass:map';
@use 'sass:string';

// Colors
// ------
/// Generate custom-property color palettes
/// with a given number of tint/shade variations --
/// dynamically based on the inherited hue, saturation, lightness,
/// mode (light/dark), and accent theme.
///
/// @param {list | string} $colors [map.keys($hues)] -
///   The color names to generate
/// @param {integer} $steps [$steps or 4] -
///   The number (each) of tints and shades to generate
/// @param {boolean | number} $fades [$fades] -
///   Optionally generate desaturated seconday `*-fade` palettes
///   for each base palette.
///   Number values will be used as
///   the `hsla()` *alpha* value,
///   adding transparency to the faded palette.
/// @param {boolean} $gradients [$gradients] -
///   Generate a striped gradient for each color palette --
///   prime, accent, and `*-fade` if required.
///   These are useful for showing the colors generated.
/// @output -
///   CSS custom properties to generate each color
///   in the requested palettes,
///   based on the starting hue, saturation, lightness,
///   and accent theme.
/// @group palettes
@mixin colors(
  $colors: map.keys(config.$hues),
  $steps: config.$steps or 4,
  $fades: config.$fades,
  $gradients: config.$gradients,
) {
  // offset steps
  --ccs-step: calc(var(--ccs-contrast) / #{$steps});

  @for $i from 1 through $steps {
    $bg: 'bg#{$i}';
    $fg: 'fg#{$i}';

    // lightness steps
    --ccs-l--#{$bg}: calc(var(--ccs-l) + var(--ccs-step) * #{$i} * var(--ccs-mode));
    --ccs-l--#{$fg}: calc(var(--ccs-l) - var(--ccs-step) * #{$i} * var(--ccs-mode));

    // saturation steps
    --ccs-s--#{$fg}: calc(var(--ccs-s) - var(--ccs-step) * #{$i});
    --ccs-s--#{$bg}: calc(var(--ccs-s) - var(--ccs-fade-background) - var(--ccs-step) * #{$i});

    // color steps
    @each $color in $colors {
      $h: var(--ccs-h--#{$color});
      $s: if(string.index($color, 'neutral'), 'neutral', null);
      $l-fg: var(--ccs-l--#{$fg});
      $l-bg: var(--ccs-l--#{$bg});
      $s-fg: var(--ccs-s--#{$s or $fg});
      $s-bg: var(--ccs-s--#{$s or $bg});

      --ccs-#{$color}--#{$fg}: hsl(#{$h}, #{$s-fg}, #{$l-fg});
      --ccs-#{$color}--#{$bg}: hsl(#{$h}, #{$s-bg}, #{$l-bg});

      @if ($fades) {
        $a: var(--ccs-fade);

        --ccs-#{$color}--#{$fg}-fade: hsla(#{$h}, #{$s-fg}, #{$l-fg}, #{$a});
        --ccs-#{$color}--#{$bg}-fade: hsla(#{$h}, #{$s-bg}, #{$l-bg}, #{$a});
      }
    }

  }

  @if ($gradients) {
    @include gradient($colors, $steps, $fades);
  }
}

// Gradient
// --------
/// Generate striped CSS gradients for each palette.
/// These are useful for visualizing the available generated colors.
///
/// @param {list | string} $colors [map.keys($hues)] -
///   The color names to generate
/// @param {integer} $steps [$steps or 4] -
///   The number (each) of tints and shades to generate
/// @param {boolean | number} $fades [$fades] -
///   Optionally generate desaturated seconday `*-fade` palettes
///   for each base palette.
///   Number values will be used as
///   the `hsla()` *alpha* value,
///   adding transparency to the faded palette.
/// @group palettes
@mixin gradient(
  $colors: map.keys(config.$hues),
  $steps: config.$steps or 4,
  $fades: config.$fades,
) {
  $gradients: ();

  @for $i from (0 - $steps) through $steps {
    $n: $i + $steps;
    $pos: abs($i);
    $stops: calc(var(--stop) * #{$n}) calc(var(--stop) * #{$n + 1});
    $var: if($i == $pos, '--fg', '--bg');
    $var: if($i == 0, '', '#{$var}#{$pos}');
    $fade: if($var != '', '#{$var}-fade', '--fade');

    @each $color in $colors {
      $main: map.get($gradients, '#{$color}-main') or ();
      $faded: map.get($gradients, '#{$color}-fade') or ();

      $main: list.append($main, var(--ccs-#{$color}#{$var}) $stops, comma);
      $faded: list.append($faded, var(--ccs-#{$color}#{$fade}) $stops, comma);

      $map: (
        '#{$color}-main': $main,
        '#{$color}-fade': $faded,
      );

      $gradients: map.merge($gradients, $map);
    }
  }

  --stop: calc(100% / (#{$steps} * 2 + 1));

  @each $color in $colors {
    $main: map.get($gradients, '#{$color}-main');
    --#{$color}-gradient: linear-gradient(to right, #{$main});

    @if ($fades) {
      $faded: map.get($gradients, '#{$color}-fade');
      --#{$color}-gradient--fade: linear-gradient(to right, #{$faded});
    }
  }
}
